{
	"info": {
		"_postman_id": "254f149e-7b44-43ca-b781-1c26502fd848",
		"name": "HW_2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"//Проверить, что в body приходит правильный string\r",
							"pm.test(\"Body is correct\", function () {\r",
							"    pm.response.to.have.body(\"This is the first responce from server!\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "",
							"value": "",
							"type": "text",
							"disabled": true
						},
						{
							"key": "",
							"value": "",
							"type": "text",
							"disabled": true
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/first",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"first"
					],
					"query": [
						{
							"key": "",
							"value": "",
							"disabled": true
						},
						{
							"key": "",
							"value": "",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json(); \r",
							"var req = request.data\r",
							"\r",
							"//Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//Спарсить response body в json\r",
							"pm.test(\"Parce response\", function () {\r",
							"   var jsonData = pm.response.json()\r",
							"});\r",
							" \r",
							"//Проверить, что name в ответе равно name s request (name вбить руками) \r",
							"pm.test(\"Name Check\", function () { \r",
							"    pm.expect(jsonData.name).to.eql(\"Olga\"); \r",
							"});\r",
							"\r",
							"//Проверить, что age в ответе равно age s request (age вбить руками)\r",
							"pm.test(\"Age Check\", function () { \r",
							"    pm.expect(jsonData.age).to.eql(\"31\"); \r",
							"});\r",
							"\r",
							"//Проверить, что salary в ответе равно salary s request (salary вбить руками)\r",
							"pm.test(\"Salary Check\", function () { \r",
							"    pm.expect(jsonData.salary).to.eql(500); \r",
							"});\r",
							"\r",
							"//Спарсить request\r",
							"pm.test(\"Parse request\", function () {\r",
							"    var req = request.data\r",
							"  });\r",
							"\r",
							"//Проверить, что name в ответе равно name s request (name забрать из request)\r",
							"pm.test(\"Name Check request\", function () { \r",
							"    pm.expect(jsonData.name).to.eql(req.name); \r",
							"});\r",
							"\r",
							"//Проверить, что age в ответе равно age s request (age забрать из request)\r",
							"pm.test(\"Age Check request\", function () { \r",
							"    pm.expect(jsonData.age).to.eql(req.age); \r",
							"});\r",
							"\r",
							"//Проверить, что salary в ответе равно salary s request (salary забрать из request)\r",
							"pm.test(\"Salary Check request\", function () { \r",
							"    pm.expect(jsonData.salary).to.eql(+req.salary); \r",
							"});\r",
							"\r",
							"//Вывести в консоль параметр family из response\r",
							"pm.test(\"Console family\", function () { \r",
							"    console.log (jsonData.family)\r",
							"});\r",
							"\r",
							"//Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\r",
							"pm.test(\"u_salary_1_5_year\", function () {\r",
							"    pm.expect(jsonData.family.u_salary_1_5_year).to.eql(req.salary*4)\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Olga",
							"type": "text"
						},
						{
							"key": "age",
							"value": "31",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "500",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_3",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var resp = pm.response.json();\r",
							"var req = pm.request.url.query.toObject ();\r",
							"\r",
							"//Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"//Спарсить response body в json\r",
							"pm.test (\"Parse responce body\", function () {\r",
							"    var resp = pm.response.json(); \r",
							"});\r",
							"//Спарсить request\r",
							"pm.test (\"Parse request\", function (){\r",
							"    var req = pm.request.url.query.toObject ();\r",
							"    });\r",
							"//Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"Age Name request\", function () { \r",
							"    pm.expect(resp.name).to.eql(req.name); \r",
							"});\r",
							"//Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test(\"Salary Name request\", function () { \r",
							"    pm.expect(resp.salary).to.eql(+req.salary); \r",
							"});\r",
							"//Вывести в консоль параметр family из response.\r",
							"pm.test(\"Console family\", function () { \r",
							"    console.log (resp.family)\r",
							"});\r",
							"//Проверить, что у параметра dog есть параметры name\r",
							"pm.test(\"Dog has name\", function () { \r",
							"    pm.expect(resp.family.pets.dog).to.have.property(\"name\");\r",
							"  });\r",
							"//Проверить, что у параметра dog есть параметры age\r",
							"pm.test(\"Dog has age\", function () { \r",
							"    pm.expect(resp.family.pets.dog).to.have.property(\"age\");\r",
							"  });\r",
							"//Проверить, что параметр name имеет значение Luky\r",
							"pm.test(\"Dog Luky\", function () { \r",
							"    pm.expect(resp.family.pets.dog.name).is.to.eql(\"Luky\");\r",
							"  });\r",
							"//Проверить, что параметр age имеет значение 4\r",
							"pm.test(\"Dog age 4\", function () { \r",
							"    pm.expect(resp.family.pets.dog.age).is.to.eql(4);\r",
							"  });"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_3?name=Olga&age=31&salary=600",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Olga"
						},
						{
							"key": "age",
							"value": "31"
						},
						{
							"key": "salary",
							"value": "600"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"//Спарсить response body в json\r",
							"pm.test(\"Parse response\", function () {\r",
							"    var resp =pm.response.json();\r",
							"});\r",
							"//Спарсить request\r",
							"pm.test (\"Parse request\", function (){\r",
							"    var req = pm.request.url.query.toObject ();\r",
							"});\r",
							"//Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test (\"Name request\", function () {\r",
							"    var resp =pm.response.json();\r",
							"    var req = pm.request.url.query.toObject ();\r",
							"    pm.expect (resp.name).to.eql(req.name)\r",
							"});\r",
							"//Проверить, что age в ответе равно age из request (age забрать из request.)\r",
							"pm.test (\"Age request\", function () {\r",
							"    var resp =pm.response.json();\r",
							"    var req = pm.request.url.query.toObject ();\r",
							"    pm.expect (resp.age).to.eql(+req.age)\r",
							"});\r",
							"//Вывести в консоль параметр salary из request\r",
							"var req = pm.request.url.query.toObject ();\r",
							"console.log (req.salary)\r",
							"//Вывести в консоль параметр salary из response\r",
							"var resp =pm.response.json();\r",
							"console.log (req.salary)\r",
							"\r",
							"//Вывести в консоль 0-й элемент параметра salary из response\r",
							"//Вывести в консоль 1-й элемент параметра salary параметр salary из response.\r",
							"//Вывести в консоль 2-й элемент параметра salary параметр salary из response.\r",
							"var resp =pm.response.json();\r",
							"var salary = resp.salary[0]\r",
							"var salary_1 = resp.salary[1]\r",
							"var salary_2 = resp.salary[2]\r",
							"console.log (req.salary, salary_1, salary_2)\r",
							"\r",
							"//Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"Salary check\", function () { \r",
							"    var resp = pm.response.json();\r",
							"    var salary = pm.request.url.query.toObject ();\r",
							"    pm.expect(resp.salary[0]).to.eql(+salary.salary); \r",
							"});\r",
							"//Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"Salary*2 check\", function () { \r",
							"    var resp = pm.response.json();\r",
							"    var salary = pm.request.url.query.toObject ();\r",
							"    pm.expect(+resp.salary[1]).to.eql(salary.salary*2); \r",
							"   });\r",
							"//Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\r",
							"pm.test(\"Salary*3 check\", function () { \r",
							"    var resp = pm.response.json();\r",
							"    var salary = pm.request.url.query.toObject ();\r",
							"    pm.expect(+resp.salary[2]).to.eql(salary.salary*3); \r",
							"   });\r",
							"//Создать в окружении переменную name\r",
							"//Создать в окружении переменную age\r",
							"//Создать в окружении переменную salary\r",
							"//Передать в окружение переменную name\r",
							"//Передать в окружение переменную age\r",
							"//Передать в окружение переменную salary\r",
							"    var resp = pm.response.json();\r",
							"    var req = pm.request.url.query.toObject ();\r",
							"  pm.environment.set (\"name\", resp.name)\r",
							"  pm.environment.set (\"age\", resp.age)\r",
							"  pm.environment.set (\"salary\", req.salary);\r",
							"\r",
							"//Написать цикл который выведет в консоль по порядку элементы списка из параметра salary\r",
							"//console.log (\"length = \",resp.salary.length)\r",
							"var salary = [resp.salary]\r",
							"for (var i=0; i<salary.length; i++) {\r",
							"    console.log (salary[i])\r",
							"}\r",
							"  "
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/object_info_4?name={{name}}&age={{age}}&salary={{salary}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "{{name}}"
						},
						{
							"key": "age",
							"value": "{{age}}"
						},
						{
							"key": "salary",
							"value": "{{salary}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "5",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//Спарсить response body в json\r",
							"var jsonData = pm.response.json(); \r",
							"//Спарсить request\r",
							"var req = request.data\r",
							"\r",
							"//Проверить, что json response имеет параметр start_qa_salary\r",
							"pm.test(\"Body contains start_qa_salary\", function () {\r",
							"    var jsonData = pm.response.json(); \r",
							"  pm.expect(jsonData).to.include.keys(\"start_qa_salary\");\r",
							"   });\r",
							"//Проверить, что json response имеет параметр qa_salary_after_6_months\r",
							"   pm.test(\"Body contains qa_salary_after_6_months\", function () {\r",
							"    var jsonData = pm.response.json(); \r",
							"  pm.expect(jsonData).to.include.keys(\"qa_salary_after_6_months\");\r",
							"   });\r",
							"//Проверить, что json response имеет параметр qa_salary_after_12_months\r",
							"   pm.test(\"Body contains qa_salary_after_12_months\", function () {\r",
							"    var jsonData = pm.response.json(); \r",
							"  pm.expect(jsonData).to.include.keys(\"qa_salary_after_12_months\");\r",
							"   });\r",
							"//Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
							"   pm.test(\"Body contains qa_salary_after_1.5_year\", function () {\r",
							"    var jsonData = pm.response.json(); \r",
							"  pm.expect(jsonData).to.include.keys(\"qa_salary_after_1.5_year\");\r",
							"     });\r",
							"//Проверить, что json response имеет параметр qa_salary_after_3.5_years     \r",
							"    pm.test(\"Body contains qa_salary_after_3.5_years\", function () {\r",
							"    var jsonData = pm.response.json(); \r",
							"  pm.expect(jsonData).to.include.keys(\"qa_salary_after_3.5_years\");\r",
							"     });\r",
							"//Проверить, что json response имеет параметр person\r",
							"    pm.test(\"Person\", function () {\r",
							"    var jsonData = pm.response.json(); \r",
							"  pm.expect(jsonData).to.include.keys(\"person\");\r",
							"     });\r",
							"//Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)\r",
							"    pm.test(\"start_qa_salary check request\", function () { \r",
							"    var jsonData = pm.response.json(); \r",
							"    var req = request.data\r",
							"    pm.expect(jsonData.start_qa_salary).to.eql(+req.salary); \r",
							"    });\r",
							"//Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\r",
							"    pm.test(\"qa_salary_after_6_months check request\", function () { \r",
							"    var jsonData = pm.response.json(); \r",
							"    var req = request.data\r",
							"    pm.expect(jsonData.qa_salary_after_6_months).to.eql(+req.salary*2); \r",
							"       });\r",
							"//Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request) \r",
							"    pm.test(\"qa_salary_after_12_months check request\", function () { \r",
							"    var jsonData = pm.response.json(); \r",
							"    var req = request.data\r",
							"    pm.expect(jsonData.qa_salary_after_12_months).to.eql(+req.salary*2.7); \r",
							"       });\r",
							"//Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)\r",
							"    pm.test(\"qa_salary_after_1.5_year check request\", function () { \r",
							"    var jsonData = pm.response.json(); \r",
							"    var req = request.data\r",
							"    pm.expect(jsonData[\"qa_salary_after_1.5_year\"]).to.eql(+req.salary*3.3); \r",
							"        });     \r",
							"//Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request)\r",
							"    pm.test(\"qa_salary_after_3.5_year check request\", function () { \r",
							"    var jsonData = pm.response.json(); \r",
							"    var req = request.data\r",
							"    pm.expect(jsonData[\"qa_salary_after_3.5_years\"]).to.eql(+req.salary*3.8); \r",
							"        });   \r",
							"//Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)\r",
							"    pm.test(\"u_name[1] = salary request\", function () { \r",
							"    var jsonData = pm.response.json(); \r",
							"    var req = request.data\r",
							"    pm.expect(jsonData.person.u_name[1]).to.eql(+req.salary); \r",
							"       });\r",
							"//Проверить, что что параметр u_age равен age из request (age забрать из request.)\r",
							"    pm.test(\"u_age = age request\", function () { \r",
							"    var jsonData = pm.response.json(); \r",
							"    var req = request.data\r",
							"    pm.expect(jsonData.person.u_age).to.eql(+req.age); \r",
							"     });\r",
							"//Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)\r",
							"    pm.test(\"u_salary_5_years =salary*4.2 \", function () { \r",
							"    var jsonData = pm.response.json(); \r",
							"    var req = request.data\r",
							"    pm.expect(jsonData.person.u_salary_5_years).to.eql(+req.salary*4.2); \r",
							"    });\r",
							"//Написать цикл который выведет в консоль по порядку элементы списка из параметра person.  \r",
							"    var person = [jsonData.person.u_age,jsonData.person.u_name,jsonData.person.u_salary_5_years]\r",
							"  //  console.log (\"length ==\", person.length)\r",
							"    for (var i= 0; i < person.length; i++) {\r",
							"        console.log (person[i])\r",
							"    };"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/user_info_2",
					"host": [
						"{{url}}"
					],
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		}
	]
}